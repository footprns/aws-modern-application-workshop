# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- dotnet-multienv

variables:
- group: aws

jobs:
- job: BuildModule2
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - script: |
      mkdir ~/.aws
      echo [default] > ~/.aws/credentials
      echo aws_access_key_id=$(aws_access_key_id) >> ~/.aws/credentials
      echo aws_secret_access_key=$(aws_secret_access_key) >> ~/.aws/credentials
      
      echo [default] > ~/.aws/config
      echo region=ap-southeast-1 >> ~/.aws/config
      echo output=json >> ~/.aws/config
    displayName: 'Set AWS credential'

  # - script: |
  #     aws cloudformation create-stack --stack-name MythicalMysfitsCoreStack --capabilities CAPABILITY_NAMED_IAM --template-body file://module-2/cfn/core.yml   
  #   displayName: 'Create MythicalMysfitsCoreStack'

  # - script: |
  #     cd ./module-2/webapi
  #     docker build . -t $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$(aws configure get region).amazonaws.com/mythicalmysfits/service:latest
  #     docker login -u AWS -p $(aws ecr get-login-password) https://$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$(aws configure get region).amazonaws.com
  #     docker push $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$(aws configure get region).amazonaws.com/mythicalmysfits/service:latest
  #   displayName: 'docker build'

  - script: |
      aws elbv2 create-load-balancer --name mysfits-nlb --scheme internet-facing --type network \
      --subnets \
      $(aws ec2 describe-subnets --filter Name=tag:aws:cloudformation:logical-id,Values=PrivateSubnetOne --query "Subnets[*].[SubnetId]" --out text) \
      $(aws ec2 describe-subnets --filter Name=tag:aws:cloudformation:logical-id,Values=PrivateSubnetTwo --query "Subnets[*].[SubnetId]" --out text)
    displayName: 'Create NLB'
  - script: |
      export REPLACE_ME_ECS_SERVICE_ROLE_ARN=$(aws iam list-roles | jq '.Roles[] | select(.RoleName| contains("MythicalMysfitsCoreStack-EcsServiceRole")) | .Arn' -r)
      echo $REPLACE_ME_ECS_SERVICE_ROLE_ARN
      export REPLACE_ME_ECS_TASK_ROLE_ARN=$(aws iam list-roles | jq '.Roles[] | select(.RoleName| contains("MythicalMysfitsCoreStack-ECSTaskRole")) | .Arn' -r)
      echo $REPLACE_ME_ECS_TASK_ROLE_ARN
      export REPLACE_ME_IMAGE_TAG_USED_IN_ECR_PUSH=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$(aws configure get region).amazonaws.com/mythicalmysfits/service:latest
      echo $REPLACE_ME_IMAGE_TAG_USED_IN_ECR_PUSH
      export REPLACE_ME_REGION=$(aws configure get region)
      echo $REPLACE_ME_REGION
      sed -i 's/REPLACE_ME_ECS_SERVICE_ROLE_ARN/${REPLACE_ME_ECS_SERVICE_ROLE_ARN}/g' ./module-2/aws-cli/task-definition.json
      sed -i 's/REPLACE_ME_ECS_TASK_ROLE_ARN/${REPLACE_ME_ECS_TASK_ROLE_ARN}/g' ./module-2/aws-cli/task-definition.json
      sed -i 's/REPLACE_ME_IMAGE_TAG_USED_IN_ECR_PUSH/${REPLACE_ME_IMAGE_TAG_USED_IN_ECR_PUSH}/g' ./module-2/aws-cli/task-definition.json
      sed -i 's/REPLACE_ME_REGION/${REPLACE_ME_REGION}/g' ./module-2/aws-cli/task-definition.json
      cat ./module-2/aws-cli/task-definition.json
    displayName: 'Modify task-definition.json'


# aws ec2 describe-security-groups --filters Name=group-name,Values=MythicalMysfitsCoreStack* --query "SecurityGroups[*].[GroupId]" --out text
# aws ec2 describe-subnets --filter Name=tag:aws:cloudformation:logical-id,Values=PrivateSubnetOne --query "Subnets[*].[SubnetId]" --out text
# aws ec2 describe-subnets --filter Name=tag:aws:cloudformation:logical-id,Values=PrivateSubnetTwo --query "Subnets[*].[SubnetId]" --out text
# aws iam list-roles \
# --filters Name=role-name,Values=MythicalMysfitsCoreStack-EcsServiceRole*
# aws iam get-role \
    # --role-name MythicalMysfitsCoreStack-EcsServiceRole-181W9N3M6Y0V9 \
    # --query "Role.[Arn]" --out text

# aws iam get-role \
    # --role-name MythicalMysfitsCoreStack-EcsServiceRole-.* \
    # --query "Role.[Arn]" --out text

# aws iam list-roles | jq '.Roles[] |{RoleName: .RoleName, Arn: .Arn}' >roles.txt
# aws iam list-roles | jq '.Roles[] | select(.RoleName| contains("MythicalMysfitsCoreStack-EcsServiceRole")) | {RoleName: .RoleName, Arn: .Arn}' 
# aws iam list-roles | jq '.Roles[] | select(.RoleName| contains("MythicalMysfitsCoreStack-EcsServiceRole")) | .Arn' -r
# aws iam list-roles | jq '.Roles[] | select(.RoleName| contains("MythicalMysfitsCoreStack-ECSTaskRole")) | .Arn' -r

